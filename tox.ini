# Copyright 2021 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint, static-{charm,lib,unit,integration}, unit

[vars]
src_path = {toxinidir}/src
tst_path = {toxinidir}/tests
lib_path = {toxinidir}/lib/charms/alertmanager_k8s
all_path = {[vars]src_path} {[vars]tst_path} {[vars]lib_path}

[testenv]
basepython = python3
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  HOME
  PATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS
  HTTP_PROXY
  HTTPS_PROXY
  NO_PROXY

[testenv:fmt]
description = Apply coding style standards to code
deps =
    black
    isort
commands =
    isort {[vars]all_path}
    black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    flake8
    flake8-docstrings
    flake8-copyright
    flake8-builtins
    pyproject-flake8
    pep8-naming
    isort
    codespell
commands =
    codespell {[vars]lib_path}
    codespell . --skip .git --skip .tox --skip build --skip lib --skip venv --skip .mypy_cache
    # pflake8 wrapper supports config from pyproject.toml
    pflake8 {[vars]all_path}
    isort --check-only --diff {[vars]all_path}
    black --check --diff {[vars]all_path}

[testenv:static-{charm,lib,unit,integration}]
description = Run static analysis checks
setenv =
    unit: MYPYPATH = {[vars]tst_path}/unit
    integration: MYPYPATH = {[vars]tst_path}/integration
deps =
    mypy
    types-PyYAML
    types-setuptools
    types-toml
    # pip-check-reqs does not yet work with recent pip
    pip-check-reqs
    charm: pip<=21.1.3
    charm: -r{toxinidir}/requirements.txt
    lib: git+https://github.com/canonical/operator#egg=ops
    unit: {[testenv:unit]deps}
    integration: {[testenv:integration]deps}
commands =
    charm: pip-missing-reqs {toxinidir}/src {toxinidir}/lib --requirements-file={toxinidir}/requirements.txt
    charm: pip-extra-reqs {toxinidir}/src {toxinidir}/lib --requirements-file={toxinidir}/requirements.txt
    charm: mypy {[vars]src_path} {posargs}
    lib: mypy --python-version 3.5 {[vars]lib_path} {posargs}
    unit: mypy {[vars]tst_path}/unit {posargs}
    integration: mypy {[vars]tst_path}/integration {posargs}

[testenv:unit]
description = Run unit tests
deps =
    pytest
    coverage[toml]
    hypothesis
    validators
    -r{toxinidir}/requirements.txt
commands =
    coverage run \
      --source={[vars]src_path},{[vars]lib_path} \
      -m pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tst_path}/unit
    coverage report

[testenv:integration]
description = Run integration tests
deps =
    #git+https://github.com/juju/python-libjuju.git
    juju
    pytest
    pytest-operator
    #git+https://github.com/charmed-kubernetes/pytest-operator.git
commands =
    pytest -v --tb native --log-cli-level=INFO -s {posargs} {toxinidir}/tests/integration

[testenv:integration-lma]
description = Run lma bundle integration tests but with alertmanager built from source
lma_bundle_dir = {envtmpdir}/lma-light-bundle
deps =
    # deps from lma-bundle - these are needed here because will be running pytest on lma-bundle
    jinja2
    juju
    pytest
    pytest-operator
allowlist_externals =
    git
commands =
    git clone --single-branch --depth=1 https://github.com/canonical/lma-light-bundle.git {[testenv:integration-lma]lma_bundle_dir}
    # run pytest on the integration tests of the lma bundle, but override alertmanager with path to
    # this source dir
    pytest -v --tb native --log-cli-level=INFO -s --alertmanager={toxinidir} {posargs} {[testenv:integration-lma]lma_bundle_dir}/tests/integration
